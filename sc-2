2 / 2

pragma solidity ^0.5.1;

// Define NFT contract
contract NFT {
// Define variables for token ID, security grade, and owner address
uint256 tokenId;
uint256 securityGrade;
address owner;

// Define events for when an NFT is sold and when an NFT is bought
event Sold(uint256 tokenId, uint256 securityGrade);
event Bought(uint256 tokenId, uint256 securityGrade);

// Define function for selling an NFT
function sell(uint256 _tokenId, uint256 _securityGrade) public {
// Check if caller is the owner of the NFT
require(msg.sender == owner, "Only owner can sell NFT");
// Set token ID and security grade
tokenId = _tokenId;
securityGrade = _securityGrade;
// Emit event that NFT is sold
emit Sold(tokenId, securityGrade);
}

// Define function for buying an NFT
function buy(uint256 _tokenId, uint256 _securityGrade) public payable {
// Check if caller has enough funds to buy the NFT
require(msg.value >= _securityGrade, "Insufficient funds");
// Set token ID, security grade, and new owner
tokenId = _tokenId;
securityGrade = _securityGrade;
owner = msg.sender;
// Emit event that NFT is bought
emit Bought(tokenId, securityGrade);
}
}

// Define main contract for selling 1000 NFTs separately
contract Main {
// Define array for storing 1000 NFTs
NFT[] public nfts;

// Define function for creating 1000 NFTs
function createNFTs() public {
// Create 1000 NFTs and add to array
for (uint256 i = 0; i < 1000; i++) {
nfts.push(new NFT());
}
}

// Define function for selling an NFT
function sellNFT(uint256 _tokenId, uint256 _securityGrade) public {
// Call sell function on NFT with given token ID
nfts[_tokenId].sell(_tokenId, _securityGrade);
}

// Define function for buying an NFT
function buyNFT(uint256 _tokenId, uint256 _securityGrade) public payable {
// Call buy function on NFT with given token ID
nfts[_tokenId].buy(_tokenId, _securityGrade);
}
}


// Create an array to store the balance of each account
mapping (address => uint256) public balanceOf;

// Create an array to store the allowance of each account
mapping (address => mapping (address => uint256)) public allowance;

// Create an event to log when a transfer is made
event Transfer(address indexed from, address indexed to, uint256 value);

// Create a constructor function to initialize the total supply of the token
constructor(uint256 initialSupply) public {
    balanceOf[msg.sender] = initialSupply;
    totalSupply = initialSupply;
}

// Create a function to transfer tokens from one account to another
function transfer(address _to, uint256 _value) public {
    require(balanceOf[msg.sender] >= _value && _value > 0);
    balanceOf[msg.sender] -= _value;
    balanceOf[_to] += _value;
    emit Transfer(msg.sender, _to, _value);
}

// Create a function to approve a transfer from one account to another
function approve(address _spender, uint256 _value) public {
    allowance[msg.sender][_spender] = _value;
}

// Create a function to transfer tokens from one account to another using the approved allowance
function transferFrom(address _from, address _to, uint256 _value) public {
    require(balanceOf[_from] >= _value && allowance[_from][msg.sender] >= _value && _value > 0);
    balanceOf[_from] -= _value;
    balanceOf[_to] += _value;
    allowance[_from][msg.sender] -= _value;
    emit Transfer(_from, _to, _value);
}

